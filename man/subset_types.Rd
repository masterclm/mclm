% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/types.R
\name{subset_types}
\alias{subset_types}
\alias{drop_pos.types}
\alias{keep_pos.types}
\alias{drop_types.types}
\alias{keep_types.types}
\alias{drop_re.types}
\alias{keep_re.types}
\alias{drop_bool.types}
\alias{keep_bool.types}
\alias{[.types}
\title{Subset a 'types' object}
\usage{
\method{drop_pos}{types}(x, pos, ...)

\method{keep_pos}{types}(x, pos, invert = FALSE, ...)

\method{drop_types}{types}(x, types, ...)

\method{keep_types}{types}(x, types, invert = FALSE, ...)

\method{drop_re}{types}(x, pattern, perl = TRUE, ...)

\method{keep_re}{types}(x, pattern, perl = TRUE, invert = FALSE, ...)

\method{drop_bool}{types}(x, bool, ...)

\method{keep_bool}{types}(x, bool, invert = FALSE, ...)

\method{[}{types}(x, i, invert = FALSE, ...)
}
\arguments{
\item{x}{Object of class \code{types}.}

\item{pos}{A numeric vector, the numbers in which identify positions (= indices)
of items in \code{x}. If the numbers are positive, then their values point
to the items that are to be selected. If the numbers are negative,
then their absolute values point to the items that are not to be selected.
Positive and negative numbers must not be mixed.}

\item{...}{Additional arguments.}

\item{invert}{Boolean vector of length one, which indicates whether the matches
or the non-matches should be selected.}

\item{types}{Either an object of the class \code{'types'}
(see \code{\link{types}} and \code{\link{as_types}}) or a character vector.
Assuming \code{invert} is \code{FALSE},
those items are selected the name of which is included in \code{types}.}

\item{pattern}{Either an object of the class \code{'re'} (see \code{\link{re}})
or a character vector of length one, which contains a regular expression.}

\item{perl}{Boolean vector of length one, which indicates whether or not
\code{pattern} is treated as a PCRE flavor regular expression.
The \code{perl} argument is only used if \code{pattern} is a regular character vector.
If \code{pattern} is an object of the class \code{'re'}, then the
\code{perl} argument is ignored, and the relevant information in the
\code{'re'} object \code{pattern}, viz. the value of \code{pattern$perl}, is
used instead.}

\item{bool}{A logical vector of the same length as \code{x}. If \code{bool} is not
of the correct length, it is \emph{recycled}. Assuming \code{invert} is
\code{FALSE}, those items are selected for which \code{bool} is \code{TRUE}.}

\item{i}{Selection criterion when subsetting with \code{[]}; depending on its
class, it behaves differently:
 \describe{
   \item{\code{re}}{It works like \code{keep_re}.}
   \item{numeric}{It works like \code{keep_pos}.}
   \item{logical}{It works like \code{keep_bool}.}
   \item{\code{types} or character}{It works like \code{keep_types}.}
 }}
}
\value{
Object of class \code{types} with the selected elements only.
}
\description{
Methods to subset objects of class \code{types} by position, list of types,
regex match or via boolean statements.
}
\details{
The S3 methods starting with \code{keep_} (\code{keep_re()}, \code{keep_pos()},
\code{keep_bool()}, and \code{keep_types()}), when applied to an object of the
class \code{'types'}, take as their first argument \code{x}
an object of the class \code{'types'}, and extract from it those
items that \emph{match} the selection criterion which is their second argument,
viz. \code{pattern} in \code{keep_re()}, \code{pos} in \code{keep_pos()},
\code{bool} in \code{keep_bool()}, and \code{types} in \code{keep_types()}.
In this documentation, these methods are collectively called the \code{keep}-methods.

The S3 methods starting with \code{drop_} (\code{drop_re()}, \code{drop_pos()},
\code{drop_bool()}, and \code{drop_types()}), collectively called the \code{drop}-methods,
behave identical to how the \code{keep}-methods work when the argument \code{invert}
(which by default is \code{FALSE}) is set to \code{TRUE}.
In that case,  the items that \emph{do not match} the selection criterion are selected.

Subset selection for \code{'types'} object with the notation \code{[]},
in which case argument \code{i} is the selection criterion, behaves
similarly to the \code{keep}-methods. For more details on the relation
between the \code{[]} notation and the \code{keep}-methods, 
see the description of the argument \code{i}.
When the notation \code{x[i, \dots]} is used, it is also possible to
use the \code{invert} argument (which then is one of the additional
arguments in \code{\dots}). This \code{invert} argument
then serves the same purpose as the \code{invert} argument in the \code{keep}-methods.
When the notation \code{x[i, \dots]} is used, and no \code{invert} argument
is given, then \code{invert} is taken to be \code{FALSE}.
}
\section{Methods (by generic)}{
\itemize{
\item \code{drop_pos}: Drop items by position

\item \code{keep_pos}: Select items by position

\item \code{drop_types}: Drop items by list of types

\item \code{keep_types}: Keep items by list of types

\item \code{drop_re}: Drop items by regular expression

\item \code{keep_re}: Keep items by regular expression

\item \code{drop_bool}: Drop items based on boolean statement

\item \code{keep_bool}: Keep items based on boolean statement

\item \code{[}: Keep items based on different criteria
}}

\examples{

(tps <- as_types(letters[1:10]))

keep_re(tps, "[acegi]")
drop_re(tps, "[acegi]")

keep_pos(tps, c(1, 3, 5, 7, 9))
drop_pos(tps, c(1, 3, 5, 7, 9))

keep_bool(tps, c(TRUE, FALSE))
drop_bool(tps, c(TRUE, FALSE))

keep_types(tps, c("a", "c", "e", "g", "i"))
drop_types(tps,  c("a", "c", "e", "g", "i"))

tps[re("[acegi]")]
tps[c(1, 3, 5, 7, 9)]
tps[c(TRUE, FALSE)]
tps[c("a", "c", "e", "g", "i")]

tps[re("[acegi]"), invert = TRUE]
tps[c(1, 3, 5, 7, 9), invert = TRUE]
tps[c(TRUE, FALSE), invert = TRUE]
tps[c("a", "c", "e", "g", "i"), invert = TRUE]
}
